{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/src/pages/index.tsx\";\n//formas de consumo de uma api em next\n// SPA se precisamos que as infos sejam carregadas no momento q o user acessa a página,\n// aí se fazem melhores os outros métodos:\n// SSR Server Side Rendering\n// SSG\nexport default function Home(props) {\n  // SPA: esse método n possibilita a iondexação por parte dos crowlers, \n  // por estes n aguardam a chamada completa da api finalizar para então \n  // coletar as infos disponíveis na página pra indexar no google e tals\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //   .then(response => response.json())\n  //   .then(data => console.log(data))\n  // }, [])\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Index\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n} // SSR p/ fzer SSR no next: \n// dentro de qlqr página/arquivo na pasta pages\n//exportar a seguinte função: \n\nexport async function getServerSideProps() {\n  //fazendo isso, o next já entende q ele precisa executar essa função,\n  //antes de exibir o conteudo da página pro usuário final\n  const response = await fetch('http://localhost:3333/episodes');\n  const data = await response.json();\n  return {\n    props: {\n      episodes: data\n    }\n  }; //ao fazer isso, qdo a página carrega, no momento q a página é exibida,\n  //os dados já vao estar ali, n será preciso fazr nenhuma requisição pro back end, \n  // \n}","map":{"version":3,"sources":["/home/joaopfa/Desktop/Cursos e imersões/NLW 05 Podcastr/podcastrnext/src/pages/index.tsx"],"names":["Home","props","console","log","getServerSideProps","response","fetch","data","json","episodes"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAIA,eAAe,SAASA,IAAT,CAAcC,KAAd,EAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,C,CAED;AACA;AACA;;AACA,OAAO,eAAeG,kBAAf,GAAoC;AACzC;AACA;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAM;AACJP,IAAAA,KAAK,EAAE;AACLQ,MAAAA,QAAQ,EAAEF;AADL;AADH,GAAN,CALyC,CASxC;AACD;AACA;AACD","sourcesContent":["//formas de consumo de uma api em next\n// SPA se precisamos que as infos sejam carregadas no momento q o user acessa a página,\n// aí se fazem melhores os outros métodos:\n// SSR Server Side Rendering\n// SSG\n\nimport { useEffect } from \"react\"\n\nexport default function Home(props) {\n  // SPA: esse método n possibilita a iondexação por parte dos crowlers, \n  // por estes n aguardam a chamada completa da api finalizar para então \n  // coletar as infos disponíveis na página pra indexar no google e tals\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //   .then(response => response.json())\n  //   .then(data => console.log(data))\n  // }, [])\n  console.log(props)\n\n  return (\n    <h1>Index</h1>\n  )\n}\n\n// SSR p/ fzer SSR no next: \n// dentro de qlqr página/arquivo na pasta pages\n//exportar a seguinte função: \nexport async function getServerSideProps() {\n  //fazendo isso, o next já entende q ele precisa executar essa função,\n  //antes de exibir o conteudo da página pro usuário final\n  const response = await fetch('http://localhost:3333/episodes')\n  const data = await response.json()\n  return{\n    props: {\n      episodes: data,\n    }\n  }//ao fazer isso, qdo a página carrega, no momento q a página é exibida,\n  //os dados já vao estar ali, n será preciso fazr nenhuma requisição pro back end, \n  // \n}"]},"metadata":{},"sourceType":"module"}