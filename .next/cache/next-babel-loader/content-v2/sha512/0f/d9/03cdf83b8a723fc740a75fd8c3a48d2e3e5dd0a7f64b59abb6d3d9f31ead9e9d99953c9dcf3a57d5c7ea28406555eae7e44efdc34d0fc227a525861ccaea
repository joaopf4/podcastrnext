{"ast":null,"code":"import _regeneratorRuntime from \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/src/pages/index.tsx\";\n//formas de consumo de uma api em next\n// SPA se precisamos que as infos sejam carregadas no momento q o user acessa a página,\n// aí se fazem melhores os outros métodos:\n// SSR Server Side Rendering\n// SSG\nexport default function Home(props) {\n  // SPA: esse método n possibilita a iondexação por parte dos crowlers, \n  // por estes n aguardam a chamada completa da api finalizar para então \n  // coletar as infos disponíveis na página pra indexar no google e tals\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //   .then(response => response.json())\n  //   .then(data => console.log(data))\n  // }, [])\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Index\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n} // // SSR p/ fzer SSR no next: \n// // dentro de qlqr página/arquivo na pasta pages\n// //exportar a seguinte função: \n// export async function getServerSideProps() {\n//   //fazendo isso, o next já entende q ele precisa executar essa função,\n//   //antes de exibir o conteudo da página pro usuário final\n//   const response = await fetch('http://localhost:3333/episodes')\n//   const data = await response.json()\n//   return{\n//     props: {\n//       episodes: data,\n//     }\n//   }//ao fazer isso, qdo a página carrega, no momento q a página é exibida,\n//   //os dados já vao estar ali, n será preciso fazr nenhuma requisição pro back end, \n//   // pq a requisição já é feita na camada do next, q é o servidor rodando a aplicação\n// }\n//SSG Static Server\n\n_c = Home;\nexport function getStaticSideProps() {\n  return _getStaticSideProps.apply(this, arguments);\n}\n\nfunction _getStaticSideProps() {\n  _getStaticSideProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('http://localhost:3333/episodes');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              props: {\n                episodes: data\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStaticSideProps.apply(this, arguments);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/joaopfa/Desktop/Cursos e imersões/NLW 05 Podcastr/podcastrnext/src/pages/index.tsx"],"names":["Home","props","console","log","getStaticSideProps","fetch","response","json","data","episodes"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AAIA,eAAe,SAASA,IAAT,CAAcC,KAAd,EAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;KAjCwBD,I;AAmCxB,gBAAsBI,kBAAtB;AAAA;AAAA;;;iFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBC,KAAK,CAAC,gCAAD,CADzB;;AAAA;AACGC,YAAAA,QADH;AAAA;AAAA,mBAEcA,QAAQ,CAACC,IAAT,EAFd;;AAAA;AAECC,YAAAA,IAFD;AAAA,6CAGC;AACJP,cAAAA,KAAK,EAAE;AACLQ,gBAAAA,QAAQ,EAAED;AADL;AADH,aAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["//formas de consumo de uma api em next\n// SPA se precisamos que as infos sejam carregadas no momento q o user acessa a página,\n// aí se fazem melhores os outros métodos:\n// SSR Server Side Rendering\n// SSG\n\nimport { useEffect } from \"react\"\n\nexport default function Home(props) {\n  // SPA: esse método n possibilita a iondexação por parte dos crowlers, \n  // por estes n aguardam a chamada completa da api finalizar para então \n  // coletar as infos disponíveis na página pra indexar no google e tals\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //   .then(response => response.json())\n  //   .then(data => console.log(data))\n  // }, [])\n  console.log(props)\n\n  return (\n    <h1>Index</h1>\n  )\n}\n\n// // SSR p/ fzer SSR no next: \n// // dentro de qlqr página/arquivo na pasta pages\n// //exportar a seguinte função: \n// export async function getServerSideProps() {\n//   //fazendo isso, o next já entende q ele precisa executar essa função,\n//   //antes de exibir o conteudo da página pro usuário final\n//   const response = await fetch('http://localhost:3333/episodes')\n//   const data = await response.json()\n//   return{\n//     props: {\n//       episodes: data,\n//     }\n//   }//ao fazer isso, qdo a página carrega, no momento q a página é exibida,\n//   //os dados já vao estar ali, n será preciso fazr nenhuma requisição pro back end, \n//   // pq a requisição já é feita na camada do next, q é o servidor rodando a aplicação\n// }\n\n//SSG Static Server\n\nexport async function getStaticSideProps() {\n    const response = await fetch('http://localhost:3333/episodes')\n  const data = await response.json()\n  return{\n    props: {\n      episodes: data,\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}