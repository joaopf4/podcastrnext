{"ast":null,"code":"import _regeneratorRuntime from \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/joaopfa/Desktop/Cursos e imers\\xF5es/NLW 05 Podcastr/podcastrnext/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//formas de consumo de uma api em next\n// SPA se precisamos que as infos sejam carregadas no momento q o user acessa a página,\n// aí se fazem melhores os outros métodos:\n// SSR Server Side Rendering\n// SSG\nexport default function Home(props) {\n  // SPA: esse método n possibilita a iondexação por parte dos crowlers, \n  // por estes n aguardam a chamada completa da api finalizar para então \n  // coletar as infos disponíveis na página pra indexar no google e tals\n  // useEffect(() => {\n  //   fetch('http://localhost:3333/episodes')\n  //   .then(response => response.json())\n  //   .then(data => console.log(data))\n  // }, [])\n  console.log(props);\n  return /*#__PURE__*/_jsx(\"h1\", {\n    children: \"Index\"\n  });\n} // // SSR p/ fzer SSR no next: \n// // dentro de qlqr página/arquivo na pasta pages\n// //exportar a seguinte função: \n// export async function getServerSideProps() {\n//   //fazendo isso, o next já entende q ele precisa executar essa função,\n//   //antes de exibir o conteudo da página pro usuário final\n//   const response = await fetch('http://localhost:3333/episodes')\n//   const data = await response.json()\n//   return{\n//     props: {\n//       episodes: data,\n//     }\n//   }//ao fazer isso, qdo a página carrega, no momento q a página é exibida,\n//   //os dados já vao estar ali, n será preciso fazr nenhuma requisição pro back end, \n//   // pq a requisição já é feita na camada do next, q é o servidor rodando a aplicação\n// }\n//SSG Static Server Generation\n\nexport function getStaticSideProps() {\n  return _getStaticSideProps.apply(this, arguments);\n}\n\nfunction _getStaticSideProps() {\n  _getStaticSideProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('http://localhost:3333/episodes');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              props: {\n                episodes: data\n              },\n              revalidate: 60 * 60 * 8 //a cada 8hras será ferada uma nova versão dessa página\n\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStaticSideProps.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}